export default class BankScene extends Phaser.Scene {
    constructor() {
        super({ key: 'BankScene' });
        this.score = 0;
        this.timeLeft = 10; // –¢–∞–π–º–µ—Ä –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        this.trashItems = []; // –•—Ä–∞–Ω–∏–º –º—É—Å–æ—Ä–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        this.gameEnded = false; // –§–ª–∞–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    }

    preload() {
        this.load.image('bank_bg', 'assets/images/bank_bg.png');
        this.load.image('paper', 'assets/images/paper.png');
        this.load.image('plastic', 'assets/images/plastic.png');
        this.load.image('glass', 'assets/images/glass.png');
        this.load.image('bag', 'assets/images/bag.png');
        this.load.image('bin', 'assets/images/bin.png');
        this.load.image('back_button', 'assets/images/back_button.png');
    }

    create() {
        console.log("üöÄ BankScene –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
    
        // –§–æ–Ω
        this.add.image(400, 300, 'bank_bg').setScale(1.3);
    
        // –ú—É—Å–æ—Ä–Ω—ã–π –±–∞–∫ (–û–ü–£–°–ö–ê–ï–ú –ï–©–Å –ù–ò–ñ–ï)
        this.bin = this.add.image(400, 580, 'bin').setScale(0.9).setDepth(0); 
    
        // –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
        this.taskText = this.add.text(200, 50, "", {
            fontSize: '28px',
            fill: '#FFD700',
            fontFamily: 'Comic Sans MS',
            fontStyle: 'bold',
            stroke: '#000',
            strokeThickness: 4
        });
    
        // –û—á–∫–∏
        this.scoreText = this.add.text(20, 20, "–û—á–∫–∏: 0", {
            fontSize: '20px',
            fill: '#fff'
        });
    
        // –¢–∞–π–º–µ—Ä
        this.timerText = this.add.text(650, 20, `–í—Ä–µ–º—è: ${this.timeLeft}`, {
            fontSize: '20px',
            fill: '#fff'
        });
    
        // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        this.timeEvent = this.time.addEvent({
            delay: 1000,
            callback: this.updateTimer,
            callbackScope: this,
            loop: true
        });
    
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥
        this.startNewRound();
    
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        let backButton = this.add.image(700, 50, 'back_button').setInteractive();
        backButton.setScale(0.7);
        backButton.on('pointerover', () => backButton.setScale(0.8));
        backButton.on('pointerout', () => backButton.setScale(0.7));
        backButton.on('pointerdown', () => {
            window.location.href = "game.html";
        });
    
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –º—É—Å–æ—Ä–∞
        this.setupDragAndDrop();
    }
    
    

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
    updateTimer() {
        if (this.timeLeft > 0) {
            this.timeLeft--;
            this.timerText.setText(`–í—Ä–µ–º—è: ${this.timeLeft}`);
        } else {
            if (!this.gameEnded) { 
                this.endGame();
                this.gameEnded = true; 
            }
        }
    }

    // –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    startNewRound() {
        if (this.gameEnded) return;
    
        console.log("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥!");
    
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º—É—Å–æ—Ä
        this.trashItems.forEach(trash => trash.destroy());
        this.trashItems = [];
    
        // –í—ã–±–∏—Ä–∞–µ–º –¥–≤–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–∏–¥–∞ –º—É—Å–æ—Ä–∞
        this.trashTypes = ['paper', 'plastic', 'glass', 'bag'];
        this.requestedTrash = Phaser.Utils.Array.Shuffle(this.trashTypes).slice(0, 2);
        this.taskText.setText(`–ë–∞–Ω–∫ –º—É—Å–æ—Ä–∞ –∂–¥—ë—Ç: ${this.requestedTrash.join(' + ')}`);
    
        // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º—É—Å–æ—Ä–∞ (–í –î–í–ê –†–Ø–î–ê, –í–´–®–ï –ë–ê–ö–ê)
        let positions = [180, 320, 460, 600]; // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        let trashY1 = 320; // –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥
        let trashY2 = 320; // –ù–∏–∂–Ω–∏–π —Ä—è–¥
    
        this.trashTypes.forEach((type, index) => {
            let yPos = index % 2 === 0 ? trashY1 : trashY2; // –ß–µ—Ä–µ–¥—É–µ–º —Å—Ç—Ä–æ–∫–∏
            let trash = this.add.image(positions[index], yPos, type).setInteractive();
            trash.setData('type', type);
            trash.setScale(0.18).setDepth(1); // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ —Ä–∞–∑–º–µ—â–∞–µ–º –≤—ã—à–µ
            this.input.setDraggable(trash);
            this.trashItems.push(trash);
        });
    
        console.log("‚úÖ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ –∑–∞–≥—Ä—É–∂–µ–Ω:", this.requestedTrash);
    }
    
    
    
    

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –º—É—Å–æ—Ä–∞
    setupDragAndDrop() {
        this.input.on('drag', (pointer, gameObject, dragX, dragY) => {
            gameObject.x = dragX;
            gameObject.y = dragY;
        });
    
        this.input.on('dragend', (pointer, gameObject) => {
            if (this.checkCorrectDrop(gameObject)) {
                let type = gameObject.getData('type');
                console.log(`‚úÖ ${type} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –±–∞–Ω–∫!`);
    
                this.score += 10;
                this.scoreText.setText(`–û—á–∫–∏: ${this.score}`);
    
                gameObject.destroy();
                this.trashItems = this.trashItems.filter(item => item !== gameObject);
    
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤–µ—Å—å –º—É—Å–æ—Ä —Å–æ–±—Ä–∞–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π!
                if (this.trashItems.length === 0) {
                    console.log("üîÑ –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã! –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –º—É—Å–æ—Ä.");
                    this.time.delayedCall(500, () => this.startNewRound(), [], this);
                }
            } else {
                console.log("‚ùå –û—à–∏–±–∫–∞! –ú—É—Å–æ—Ä –Ω–µ –ø—Ä–∏–Ω—è—Ç.");
                this.score -= 5;
                this.scoreText.setText(`–û—á–∫–∏: ${this.score}`);
    
                this.tweens.add({
                    targets: gameObject,
                    x: gameObject.input.dragStartX,
                    y: gameObject.input.dragStartY,
                    duration: 300,
                    ease: 'Power2'
                });
            }
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞ –º—É—Å–æ—Ä–∞
    checkCorrectDrop(gameObject) {
        let distance = Phaser.Math.Distance.Between(gameObject.x, gameObject.y, this.bin.x, this.bin.y);
        return distance < 80 && this.requestedTrash.includes(gameObject.getData('type'));
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
    endGame() {
        this.gameEnded = true;
    
        this.timeEvent.remove(false);
        console.log("‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É.");
    
        // –ó–∞—Ç–µ–º–Ω—è–µ–º —ç–∫—Ä–∞–Ω
        this.endScreen = this.add.rectangle(400, 300, 500, 300, 0x000000, 0.8).setDepth(2);
        this.add.text(190, 240, `‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ!`, { 
            fontSize: '32px', fill: '#FFD700', fontFamily: 'Comic Sans MS'
        }).setDepth(3);
    
        this.add.text(190, 280, `üéØ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${this.score} –æ—á–∫–æ–≤`, { 
            fontSize: '28px', fill: '#fff', fontFamily: 'Comic Sans MS'
        }).setDepth(3);
    
        let restartButton = this.add.text(190, 330, "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", { 
            fontSize: '24px', fill: '#FFF', backgroundColor: '#ff6b6b', 
            padding: { x: 20, y: 10 },
            borderRadius: 10 
        })
        .setInteractive()
        .on('pointerdown', () => {
            this.restartGame();
        }).setDepth(3);
    
        restartButton.setPadding(10);
    }
    

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    restartGame() {
        console.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã...");
    
        this.gameEnded = false; 
        this.timeLeft = 10; 
    
        this.time.removeAllEvents();
        this.trashItems.forEach(trash => trash.destroy());
        this.trashItems = [];
    
        if (this.endScreen) this.endScreen.destroy(); // –£–¥–∞–ª—è–µ–º –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    
        this.scene.restart(); 
    }
    
}
